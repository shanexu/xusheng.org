#+TITLE:       InfluxDB负载测试设计
#+AUTHOR:      Shane Xu
#+EMAIL:       xusheng0711@gmail.com
#+DATE:        2016-10-20 Thu
#+URI:         /blog/%y/%m/%d/influxdb-load-test-design
#+KEYWORDS:    influxdb, go
#+TAGS:        influxdb, go
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: <TODO: insert your description here>

* 重新看一遍tsm1的DESIGN.md
** 数据写入
   Write throughput is bounded by the time to process the write on the CPU (parsing, sorting, etc..), adding and evicting to the Cache and appending the write to the WAL.  The first two items are CPU bound and can be tuned and optimized if they become a bottleneck.  The WAL write can be tuned such that in the worst case every write requires at least 2 IOPS (write + fsync) or batched so that multiple writes are queued and fsync'd in sizes matching one or more disk blocks.  Performing more work with each IO will improve throughput

   Write latency is minimal for the WAL write since there are no seeks.  The latency is bounded by the time to complete any write and fsync calls.
** 数据查询
   Query throughput is directly related to how many blocks can be read in a period of time.  The index structure contains enough information to determine if one or multiple blocks can be read in a single IO.

   Query latency is determine by how long it takes to find and read the relevant blocks.  The in-memory index structure contains the offsets and sizes of all blocks for a key.  This allows every block to be read in 2 IOPS (seek + read) regardless of position, structure or size of file.

** 我粗鄙的结论
   我一直认为influxdb的瓶颈不在写，而是在于读。

* 压力测试工具选择
  前几天看到ES的测试工具 [[https://github.com/elastic/rally][rally]] 中用了Actor模型，于是突发奇想，找一个基于Akka的测试工具，于是找到了 [[http://gatling.io/][gatling]] 。我的想法是如果底层使用Akka的话, 利用Akka-cluster应该很容易实现分布式测试。然而这个功能在商业版中才有。[[https://github.com/gatling/gatling/issues/415]]

* Gatling简单的使用方法
  
  
